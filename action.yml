name: HL7 Validator
description: Run the HL7 Java validator and analyze the results.
inputs:
  version:
    description: The FHIR version to use
  ig:
    description: An IG or profile definition to load
  recurse:
    description: Look in subfolders when 'ig' refers to a folder
    default: "true"
  tx:
    description: The [base] url of a FHIR terminology server
  profile:
    desciption: the canonical URL to validate against
  language:
    description: The language to use when validating coding displays - same value as for xml:lang
  source:
    description: a file, url, directory or pattern for resources to validate
    required: true
  fail-at:
    description: The level at which issues are considered fatal (error, warning or information).
    default: error
  verbosity-level:
    description: Only show issues at this level or more severe (error, warning or information).
    default: information
  ignored-issues:
    description: A YAML file listing issues that should be ignored.
runs:
  using: composite
  steps:
    - run: |
        sources=$(for source in "${{inputs.source}}"; do [[ -f $source ]] && echo $source; done)
        echo $sources
        if [ -z "$sources" ]; then
          echo "No input, skipping"
          echo "::set-output name=run::"
        else
          echo "::set-output name=run::run"
        fi
      id: check_run
      shell: bash
    - run: |
        if [ ${{ steps.check_run.run }} ]; then
          echo "::group::Echo getting the validator"
          if [ ! -f ~/validator/validator_cli.jar ]; then
            mkdir -p ~/validator
            wget -nv -O ~/validator/validator_cli.jar https://github.com/hapifhir/org.hl7.fhir.core/releases/latest/download/validator_cli.jar
          else
            echo "Validator already present"
          fi
          echo "::endgroup::"
        fi
      shell: bash
    - run: |
        echo "::set-output name=opt_version::$(if [ ! -z ${{inputs.version}} ]; then echo -version ${{ inputs.version }};fi)"
        echo "::set-output name=opt_ig::$(if [ ! -z ${{inputs.ig}} ]; then echo -ig ${{ inputs.ig }};fi)"
        echo "::set-output name=opt_recurse::$(if [ ! -z ${{inputs.recurse}} ]; then echo -recurse;fi)"
        echo "::set-output name=opt_tx::$(if [ ! -z ${{inputs.tx}} ]; then echo -tx ${{ inputs.tx }};fi)"
        echo "::set-output name=opt_profile::$(if [ ! -z ${{inputs.profile}} ]; then echo -profile ${{ inputs.profile }};fi)"
        echo "::set-output name=opt_language::$(if [ ! -z ${{inputs.language}} ]; then echo -language ${{ inputs.language }};fi)"
        echo "::set-output name=opt_ignored_issues::$(if [ ! -z ${{inputs.ignored-issues}} ]; then echo --ignored-issues=${{ inputs.ignored-issues }};fi)"
      id: set_options
      shell: bash
    - run: |
        if [ ${{ steps.check_run.run }} ]; then
          echo "::group::Run the validator"
          java -jar ~/validator/validator_cli.jar ${{ steps.set_options.outputs.opt_version }} ${{ steps.set_options.outputs.opt_ig }} ${{ steps.set_options.outputs.opt_recurse }} ${{ steps.set_options.outputs.opt_tx }} ${{ steps.set_options.outputs.opt_profile }} ${{ steps.set_options.outputs.opt_language }} -output validation.xml ${{ inputs.source }} | cat
          echo "::endgroup::"
        fi
      shell: bash
    - run: |
        if [ ${{ steps.check_run.run }} ]; then
          python3 ${{ github.action_path }}/analyze_results.py -a ${{ inputs.fail-at }} -v ${{ inputs.verbosity-level }} ${{ steps.set_options.opt_ignored_issues }} validation.xml
        fi
      shell: bash
